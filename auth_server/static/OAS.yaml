openapi: 3.0.0
info:
  version: 1.0.0
  title: Auth and identity service
servers:
  - url: /auth
paths:
  /token:
    post:
      security: []
      summary: returns token in response to username and password, similiar to legacy login
      tags:
        - auth
      requestBody:
        description: username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token-input'
      responses:
        '200':
          description: 'successful authentication, retrns the token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token-output'
        '401':
          description: 'invalid username or password'
  /revoke:
    post:
      summary: revokes the token 
      description: the revoked token cannot be used anymore, any attemp will ecounter an explicit 401 http response.
      tags:
        - auth
      responses:
        '204':
          description: successful logout, no content
        '401':
          description: token already revoked
  /user_resources:
    get:
      summary: get allowed resources for the user specified in the token
      tags: 
        - auth
      responses:
        '200':
          description: returns list of allowed resources for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-resources-output'
        '401':
          description: invalid token
          
  /user_info:
    get:
      summary: get user information
      tags: 
        - identity
      responses:
        '200':
          description: returns user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
    patch:
      summary: update user information, identifies the user by the provided token
      tags: 
        - identity
      requestBody:
        description: the user fields to be updated, supports partial schema
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema'
      responses:
        '204':
          description: 'successful update, no response body'     
          
  /users:
    get:
      summary: List all users
      tags:
        - users
      responses:
        '200':
          description: array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users-schema'
        '403':
          description: Access denied 
    post:
      summary: Create user
      tags:
        - users
      requestBody:
        description: the user to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema'
      responses:
        '201':
          description: the user without password field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id-schema'
        '403':
          description: not authorized to use resource
        default:
          description: unexpected error
  '/users/{id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user id
    get:
      summary: get the user by id
      tags:
        - users
      responses:
        '200':
          description: array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
        '403':
          description: access denied
    delete:
      summary: delete user
      tags:
        - users
      responses:
        '204':
          description: 'successful delete, no response body'
        '403':
          description: access denied
    patch:
      summary: partial update
      tags:
        - users
      requestBody:
        description: the user fields to be updated, supports partial schema
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-schema'
      responses:
        '204':
          description: 'successful update, no response body'
        '403':
          description: access-denied
  '/users/{id}/roles':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user id
    get:
      summary: List all roles associcated with the user
      tags:
        - users
      responses:
        '200':
          description: array of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-schema'
        '403':
          description: Access denied 
    post:
      summary: Assign a role to the user
      tags:
        - users
      requestBody:
        description: the role id to be assigned to the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id-schema'
      responses:
        '204':
          description: the role assigned to the user successfuly
        '403':
          description: not authorized to use user 
  '/users/{id}/roles/{sub-id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The user id
      - in: path
        name: sub-id
        required: true
        schema:
          type: string
        description: The role id
    get:
      summary: get the role by id
      tags:
        - users
      responses:
        '200':
          description: single role assigned to the user by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role-schema'
        '403':
          description: access denied
    delete:
      summary: unassign the role from the user
      tags:
        - users
      responses:
        '204':
          description: 'successful delete, no response body'
        '403':
          description: access denied          
  /roles:
    get:
      summary: List all roles
      tags:
        - roles
      responses:
        '200':
          description: array of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-schema'
        '403':
          description: Access denied 
    post:
      summary: Create role
      tags:
        - roles
      requestBody:
        description: the role to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role-schema'
      responses:
        '201':
          description: the role without password field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id-schema'
        '403':
          description: not authorized to use resource
        default:
          description: unexpected error
  '/roles/{id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The role id
    get:
      summary: get the role by id
      tags:
        - roles
      responses:
        '200':
          description: array of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role-schema'
        '403':
          description: access denied
    delete:
      summary: delete role
      tags:
        - roles
      responses:
        '204':
          description: 'successful delete, no response body'
        '403':
          description: access denied
    patch:
      summary: partial update
      tags:
        - roles
      requestBody:
        description: the role fields to be updated, supports partial schema
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/role-schema'
      responses:
        '204':
          description: 'successful update, no response body'
        '403':
          description: access-denied
  '/roles/{id}/users':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The role id
    get:
      summary: List all users associcated with the role
      tags:
        - roles
      responses:
        '200':
          description: array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users-schema'
        '403':
          description: Access denied 
    post:
      summary: Assign a user to the role
      tags:
        - roles
      requestBody:
        description: the user id to be assigned to the role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id-schema'
      responses:
        '204':
          description: the user assigned to the role successfuly
        '403':
          description: not authorized to use role 
  '/roles/{id}/users/{sub-id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The role id
      - in: path
        name: sub-id
        required: true
        schema:
          type: string
        description: The user id
    get:
      summary: get the user by id
      tags:
        - roles
      responses:
        '200':
          description: single user assigned to the role by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-schema'
        '403':
          description: access denied
    delete:
      summary: unassign the user from the role
      tags:
        - roles
      responses:
        '204':
          description: 'successful delete, no response body'
        '403':
          description: access denied
  /resources:
    get:
      summary: List all resources
      tags:
        - resources
      responses:
        '200':
          description: array of resources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resources-schema'
        '403':
          description: Access denied 
    post:
      summary: Create resource
      tags:
        - resources
      requestBody:
        description: the resource to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resource-schema'
      responses:
        '201':
          description: the resource without password field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id-schema'
        '403':
          description: not authorized to use resource
        default:
          description: unexpected error
  '/resources/{id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The resource id
    get:
      summary: get the resource by id
      tags:
        - resources
      responses:
        '200':
          description: a single resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resource-schema'
        '403':
          description: access denied
    delete:
      summary: delete resource
      tags:
        - resources
      responses:
        '204':
          description: 'successful delete, no response body'
        '403':
          description: access denied
    patch:
      summary: partial update
      tags:
        - resources
      requestBody:
        description: the resource fields to be updated, supports partial schema
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resource-schema'
      responses:
        '204':
          description: 'successful update, no response body'
        '403':
          description: access-denied
  '/resources/{id}/roles':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The resource id
    get:
      summary: List all roles associcated with the resources
      tags:
        - resources
      responses:
        '200':
          description: array of roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-schema'
        '403':
          description: Access denied 
    post:
      summary: Assign a role to the resource
      tags:
        - resources
      requestBody:
        description: the role id to be assigned to the resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id-schema'
      responses:
        '204':
          description: the role assigned to the resource successfuly
        '403':
          description: not authorized to use resource 
  '/resources/{id}/roles/{sub-id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The resource id
      - in: path
        name: sub-id
        required: true
        schema:
          type: string
        description: The role id
    get:
      summary: get the role by id
      tags:
        - resources
      responses:
        '200':
          description: single role assigned to the resource by the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role-schema'
        '403':
          description: access denied
    delete:
      summary: unassign the role from the resource
      tags:
        - resources
      responses:
        '204':
          description: 'successful delete, no response body'
        '403':
          description: access denied

components:  
  schemas:
    authorize-input:
      properties:
        token: {type: string, writeOnly: true}
        resources:
          items: {type: string}
          type: array
          writeOnly: true
      required: [resources, token]
      type: object
    id-schema:
      properties:
        id: {format: int32, type: integer}
      required: [id]
      type: object
    resource-schema:
      properties:
        path: {maxLength: 1024, minLength: 1, type: string}
        id: {format: int32, readOnly: true, type: integer}
      required: [path]
      type: object
    role-schema:
      properties:
        description: {type: string}
        name: {maxLength: 256, type: string}
        id: {format: int32, readOnly: true, type: integer}
      required: [name]
      type: object
    token-input:
      properties:
        username: {maxLength: 128, type: string}
        password: {maxLength: 256, minLength: 8, type: string, writeOnly: true}
      required: [password, username]
      type: object
    token-output:
      properties:
        token: {type: string}
        resources:
          additionalProperties: {type: boolean}
          type: object
      required: [token]
      type: object
    user-schema:
      properties:
        display_name: {maxLength: 128, type: string}
        id: {format: int32, readOnly: true, type: integer}
        avatar: {maxLength: 10240, type: string}
        username: {maxLength: 128, minLength: 1, type: string}
        password: {maxLength: 256, minLength: 8, type: string, writeOnly: true}
      required: [password, username]
      type: object
    users-schema:
      type: array
      items:
        $ref: '#/components/schemas/user-schema'
    resources-schema:
      type: array
      items:
        $ref: '#/components/schemas/resource-schema'
    roles-schema:
      type: array
      items:
        $ref: '#/components/schemas/role-schema'
    user-resources-output:
      properties:
        resources:
          items: {type: string}
          type: array
      type: object

  securitySchemes:
    bearerAuth:
      description: returns 401 http status code if user is not authorized
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
